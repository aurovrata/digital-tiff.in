<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>login Archives - Tiffin Consulting</title>
	<atom:link href="/tag/login/feed/" rel="self" type="application/rss+xml" />
	<link>/tag/login/</link>
	<description>digital business transformation</description>
	<lastBuildDate>Fri, 02 Feb 2024 12:22:27 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.7.1</generator>

<image>
	<url>/wp-content/uploads/2024/02/cropped-tiffin-icon-1-150x150.png</url>
	<title>login Archives - Tiffin Consulting</title>
	<link>/tag/login/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>WordPress log in / log out menus</title>
		<link>/wordpress-log-in-log-out-menus/</link>
					<comments>/wordpress-log-in-log-out-menus/#comments</comments>
		
		<dc:creator><![CDATA[Aurovrata V.]]></dc:creator>
		<pubDate>Sat, 10 May 2014 14:46:01 +0000</pubDate>
				<category><![CDATA[Menus]]></category>
		<category><![CDATA[News & Updates]]></category>
		<category><![CDATA[ajax]]></category>
		<category><![CDATA[login]]></category>
		<guid isPermaLink="false">http://localhost/syllogic/wp/?p=90</guid>

					<description><![CDATA[<p>One of the downsides of WordPress menus is the inability to have a set of menus for logged-in users that may differ from the primary menu. Many sites tackle this in various ways, but a conventional approach is to have a separate menus to handle&#160; the logged-in and logged-out states of the visitor. A menu [&#8230;]</p>
<p>The post <a href="/wordpress-log-in-log-out-menus/">WordPress log in / log out menus</a> appeared first on <a href="/">Tiffin Consulting</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>One of the downsides of WordPress menus is the inability to have a set of menus for logged-in users that may differ from the primary menu.</p>



<p>Many sites tackle this in various ways, but a conventional approach is to have a separate menus to handle&nbsp; the logged-in and logged-out states of the visitor.</p>



<h3 class="wp-block-heading">A menu for logged-in users and one for logged-out</h3>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/primary-menu.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/primary-menu-1024x217.jpg" alt="primary menu" class="wp-image-95" title="The usual menu from a wordpress theme"/></a></figure>



<p>Here is a screen shot of the secondary menu for the logged-out visitor (ie public view).</p>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/logout-menu.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/logout-menu-1024x178.jpg" alt="logout-menu" class="wp-image-94" title="The quick-out-menu refers to the menu registration below"/></a></figure>



<p>As you can see the menu appears above the main menu and consist of a registration and login link.&nbsp; This menu needs to change when the user is actually logged in&#8230;</p>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/log-in-menu.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/log-in-menu-1024x181.jpg" alt="log in menu" class="wp-image-93"/></a></figure>



<p>In the above case, the site is conference registration site and the menu changes to a Submission and logout menu.</p>



<h3 class="wp-block-heading">Integration with the WordPress Menu Manager</h3>



<p>Now here comes the beautiful part of this custom menu&#8230;.</p>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/wp-menu-manager-logout.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/wp-menu-manager-logout-1024x501.jpg" alt="wp menu manager - logout" class="wp-image-96" title="WP Menu Manager interface"/></a></figure>



<p>As you can see from the above screenshot of the site Dashboard, the menu manager allows the webmaster to configure the logged-out menu by adding other pages, sub-menus, links, post, categories and what not.&nbsp; However, the only thing missing is the Login menu link.&nbsp; This is done dynamically with a function by simply adding a login menu item at the end of the menu structure.</p>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/wp-menu-manager-login.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/wp-menu-manager-login-1024x539.jpg" alt="wp menu manager-login" class="wp-image-97" title="WP Menu Manager"/></a></figure>



<p>Same thing for the logged-in menu structure, no login menu item.</p>



<h3 class="wp-block-heading">So what&#8217;s the big deal?</h3>



<p>Why did we do this?&nbsp; Well for starters, adding logout/login urls has to be done manually using the custom Links items, which means that if the the site domain name changes (such going from a demo to a live site) one needs to remember to change it.&nbsp; However, we also wanted to add an Ajax-enabled login functionality as described in this neat <a title="Natko Hasik tutorial on WP ajax login" href="http://natko.com/wordpress-ajax-login-without-a-plugin-the-right-way/" target="_blank" rel="noopener">little tutorial</a> by Natko Hasik.&nbsp; And the result is this:</p>



<figure class="wp-block-image"><a href="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/ajax-login.jpg"><img decoding="async" src="http://localhost/syllogic/wp/wp-content/uploads/sites/2/2014/05/ajax-login.jpg" alt="ajax-login" class="wp-image-98" title="WP Ajax-enabled login"/></a></figure>



<p>Neat no?</p>



<p>So how does it work?&nbsp; Well here is the magic&#8230;.</p>



<details class="wp-block-details is-style-default is-layout-flow wp-block-details-is-layout-flow"><summary>The functions.php file first</summary>
<p>Here is the code to register the two menus that we will be using in the headers of our site…</p>



<pre class="wp-block-code"><code lang="php" class="language-php line-numbers">function sy_conf_register_menu() {
  register_nav_menu('quick-in-menu',__( 'Quick Loged-in Menu' ));
  register_nav_menu('quick-out-menu',__( 'Quick Loged-out Menu' ));
}
add_action( 'init', 'sy_conf_register_menu' ); // register additional menu</code></pre>



<p>Next is the function which will add the necessary login and logout menu links dynamically each time the menus are being called by the header…</p>



<pre class="wp-block-code"><code lang="php" class="language-php line-numbers">function sy_quick_nav_items( $items, $args ) 
{ //$items, $menu,
    if( 'quick-in-menu' == $args-&gt;theme_location )
        $items.= '&lt;li&gt;&lt;a href="'.wp_logout_url(get_permalink()).'" title="Logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;';
     if( 'quick-out-menu' == $args-&gt;theme_location ) {
           $logInitem = '&lt;a id="show_login" href=""&gt;Login&lt;/a&gt;';
        $logInitem.= '&lt;form id="login" action="login" method="post"&gt;';
        $logInitem.= '    &lt;p&gt;&lt;/p&gt;';
        $logInitem.= '    &lt;div id="loginFields"&gt;&lt;p&gt;&lt;label for="username"&gt;Username&lt;/label&gt;&lt;input id="username" type="text" name="username"&gt;&lt;/p&gt;';
        $logInitem.= '    &lt;p&gt;&lt;label for="password"&gt;Password&lt;/label&gt;&lt;input id="password" type="password" name="password"&gt;&lt;/p&gt;';
        $logInitem.= '    &lt;p id="lostPass"&gt;&lt;a href="&lt;?php echo wp_lostpassword_url(); ?&gt;"&gt;Lost your password?&lt;/a&gt;&lt;/p&gt;';
        $logInitem.= '    &lt;p id="loginButton"&gt;&lt;a href="javascript:void(0)"&gt;Cancel&lt;/a&gt;&lt;input type="submit" value="Login" name="submit"&gt;&lt;/p&gt;&lt;/div&gt;';
        $logInitem.= wp_nonce_field( 'ajax-login-nonce', 'security' );
        $logInitem.= '&lt;/form&gt;';
        $items.= $logInitem;
    }
    return $items;
}
add_filter( 'wp_nav_menu_items','sy_quick_nav_items', 10, 2 );</code></pre>



<p>Finally the Ajax initialisation …</p>



<pre class="wp-block-code"><code lang="php" class="language-php line-numbers">function ajax_login_init(){
    wp_register_script('ajax-login-script', get_stylesheet_directory_uri() . '/js/ajax-login-script.js', array('jquery') ); 
    wp_enqueue_script('ajax-login-script');
    wp_localize_script( 'ajax-login-script', 'ajax_login_object', array( 
        'ajaxurl' =&gt; admin_url( 'admin-ajax.php' ),
        'redirecturl' =&gt; home_url(),
        'loadingmessage' =&gt; __('Logging in, please wait...')
    ));
    // Enable the user with no privileges to run ajax_login() in AJAX
    add_action( 'wp_ajax_nopriv_ajaxlogin', 'ajax_login' );
}
// Execute the action only if the user isn't logged in
if (!is_user_logged_in()) {
    add_action('init', 'ajax_login_init');
}</code></pre>



<p>…and call handlers…</p>



<pre class="wp-block-code"><code lang="php" class="language-php line-numbers">function ajax_login(){
    // First check the nonce, if it fails the function will break
    check_ajax_referer( 'ajax-login-nonce', 'security' );
    // Nonce is checked, get the POST data and sign user on
    $info = array();
    $info['user_login'] = $_POST['username'];
    $info['user_password'] = $_POST['password'];
    $info['remember'] = true;
    $user_signon = wp_signon( $info, false );
    if ( is_wp_error($user_signon) ){
        echo json_encode(array('loggedin'=&gt;false, 'message'=&gt;__('Wrong username or password.')));
    } else {
        echo json_encode(array('loggedin'=&gt;true, 'message'=&gt;__('Login successful, redirecting...')));
    }
    die();
}</code></pre>
</details>



<details class="wp-block-details is-layout-flow wp-block-details-is-layout-flow"><summary>Ajax Javascript file ajax-login-script.js</summary>
<p>This is the javascript file that will be loaded, I place it in the js/ folder of my child-theme root folder…save the code into a new file called ajax-login-script.js</p>



<pre class="wp-block-code"><code lang="javascript" class="language-javascript line-numbers">jQuery(document).ready(function($) {
    // Show the login dialog box on click
    $('a#show_login').on('click', function(e){
        $('body').prepend('&lt;div&gt;&lt;/div&gt;');
        $('form#login').fadeIn(500);
        $('div.login_overlay, form#login a.close').on('click', function(){
            $('div.login_overlay').remove();
            $('form#login').hide();
        });
        e.preventDefault();
    });
    // Perform AJAX login on form submit
    $('form#login').on('submit', function(e){
        $('form#login div#loginFields').fadeOut(500);
        $('form#login p.status').show().text(ajax_login_object.loadingmessage);
        $.ajax({
            type: 'POST',
            dataType: 'json',
            url: ajax_login_object.ajaxurl,
            data: { 
                'action': 'ajaxlogin', //calls wp_ajax_nopriv_ajaxlogin
                'username': $('form#login #username').val(), 
                'password': $('form#login #password').val(), 
                'security': $('form#login #security').val() },
            success: function(data){
                $('form#login p.status').text(data.message);
                if (data.loggedin == true){
                    document.location.href = ajax_login_object.redirecturl;
                }
            }
        });
        e.preventDefault();
    });
});</code></pre>
</details>



<details class="wp-block-details is-layout-flow wp-block-details-is-layout-flow"><summary>CSS beautification&#8230;.</summary>
<p>the css needed to make it all look good…</p>



<pre class="wp-block-code"><code lang="css" class="language-css line-numbers">form#login {
    background-color: #FFFFFF;
    border-top: 3px solid #7B0099;
    display: none;
    padding: 5px;
    position: fixed;
    z-index: 999;
}
#login div#loginFields &gt; p {
    line-height: 0.5em;
    padding-bottom: 5px;
    text-align: right;
}
#login div#loginFields &gt; p#lostPass {
    text-align: center;
}
#login div#loginFields input {
    border: 1px solid #D3D3D3;
    padding: 1px 2px;
    width: 100px;
}
#login div#loginFields label {
    margin-right: 5px;
}

form#login p.status{
    display: none;
    line-height: 0.5em;
    padding-bottom: 5px;
    text-align: center;
}
form#login div#loginFields a.close {
    background: none repeat scroll 0 0 #F0F0F0;
    border: 1px solid #D3D3D3;
    color: #00266A;
    font-size: 11px;
    margin-right: 4px;
    padding: 1px 25px;
}
#login div#loginFields input.submit_button {
    color: #00266A;
    padding: 0 2px;
    width: 86px;
}
.login_overlay{
    height: 100%;
    width: 100%;
    background-color: transparent;
    opacity: 0.9;
    position: fixed;
    z-index: 998;
}</code></pre>
</details>



<details class="wp-block-details is-layout-flow wp-block-details-is-layout-flow"><summary>Integration into the header&#8230;</summary>
<p>This is the tricky part, because the header will differ from one theme to the next and you will need to see where best to fit in your additional menus…</p>



<pre class="wp-block-code"><code lang="markup" class="language-markup line-numbers">&lt;body&gt;
    &lt;header&gt;
         &lt;div id="top-navigation"&gt;
                &lt;nav id="quick-nav"&gt;
                &lt;?php
                    $menuClass = 'nav';
            if ( is_user_logged_in() ) {
                //get the logged-out menu 
                $quickNav = wp_nav_menu( array( 'theme_location' =&gt; 'quick-in-menu', 'container' =&gt; '', 'fallback_cb' =&gt; '', 'menu_class' =&gt; $menuClass, 'menu_id' =&gt; 'quick-menu', 'echo' =&gt; false ) );
                if ( '' == $quickNav ) : //in case the menus have not been setup
                ?&gt;
                    &lt;ul id="quick-menu"&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo wp_logout_url(get_permalink()); ?&gt;" title="Logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;?php
                else :
                    echo ( $quickNav );
                endif;
            } else {
                //get the logged-in menu
                $quickNav = wp_nav_menu( array( 'theme_location' =&gt; 'quick-out-menu', 'container' =&gt; '', 'fallback_cb' =&gt; '', 'menu_class' =&gt; $menuClass, 'menu_id' =&gt; 'quick-menu', 'echo' =&gt; false ) );
                if ( '' == $quickNav ) ://in case the menus have not been setup
            ?&gt;
                    &lt;ul id="quick-menu"&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo wp_login_url(get_permalink()); ?&gt;" title="Login"&gt;Login&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
            &lt;?php
                else :
                    echo ( $quickNav );
                endif;
            }
            ?&gt;
                &lt;/nav&gt;
                &lt;nav id="top-menu"&gt;
                &lt;?php
                    $menuClass = 'nav';
                            $primaryNav = wp_nav_menu( array( 'theme_location' =&gt; 'primary-menu', 'container' =&gt; '', 'fallback_cb' =&gt; '', 'menu_class' =&gt; $menuClass, 'menu_id' =&gt; 'top-menu', 'echo' =&gt; false ) );
                                 ?&gt;
                                &lt;!-- ...your primary menu html code....--&gt;
                &lt;/nav&gt;
         &lt;/div&gt;
    &lt;/header&gt;</code></pre>
</details>
<p>The post <a href="/wordpress-log-in-log-out-menus/">WordPress log in / log out menus</a> appeared first on <a href="/">Tiffin Consulting</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/wordpress-log-in-log-out-menus/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
